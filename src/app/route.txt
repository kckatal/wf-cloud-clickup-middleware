import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

const CLICKUP_API_TOKEN = process.env.CLICKUP_API_TOKEN!;
const CLICKUP_LIST_ID = process.env.CLICKUP_LIST_ID!;
const WEBFLOW_WEBHOOK_SECRET = process.env.WEBFLOW_WEBHOOK_SECRET; // Optional for signature verification

// Webflow webhook payload interface
interface WebflowWebhook {
  triggerType: string;
  payload: {
    name: string; // Form name
    siteId: string;
    data: Record<string, any>; // Form field data
    schema: Array<{
      fieldName: string;
      fieldType: string;
      fieldElementId: string;
    }>;
    submittedAt: string;
    id: string;
    formId: string;
    formElementId: string;
  };
}

// Verify webhook signature (optional but recommended for security)
function verifyWebflowSignature(
  secret: string,
  timestamp: string,
  body: string,
  signature: string
): boolean {
  try {
    const data = `${timestamp}:${body}`;
    const hash = crypto.createHmac('sha256', secret).update(data).digest('hex');
    
    // Check if request is within 5 minutes (to prevent replay attacks)
    const requestTimestamp = parseInt(timestamp, 10);
    const currentTime = Date.now();
    if (currentTime - requestTimestamp > 300000) {
      console.error('Webhook request is older than 5 minutes');
      return false;
    }
    
    return crypto.timingSafeEqual(Buffer.from(hash, 'hex'), Buffer.from(signature, 'hex'));
  } catch (error) {
    console.error('Error verifying webhook signature:', error);
    return false;
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.text(); // Get raw body for signature verification
    const webhookData = JSON.parse(body) as WebflowWebhook;
    
    // Verify webhook signature if secret is provided (disabled for local testing)
    if (WEBFLOW_WEBHOOK_SECRET && process.env.NODE_ENV === 'production') {
      const timestamp = request.headers.get('x-webflow-timestamp');
      const signature = request.headers.get('x-webflow-signature');
      
      if (!timestamp || !signature) {
        console.error('Missing webhook headers');
        return NextResponse.json(
          { message: 'Missing webhook headers' },
          { status: 400 }
        );
      }
      
      if (!verifyWebflowSignature(WEBFLOW_WEBHOOK_SECRET, timestamp, body, signature)) {
        console.error('Invalid webhook signature');
        return NextResponse.json(
          { message: 'Invalid webhook signature' },
          { status: 401 }
        );
      }
    }

    // Check if this is a form submission
    if (webhookData.triggerType !== 'form_submission') {
      return NextResponse.json(
        { message: 'Not a form submission webhook' },
        { status: 400 }
      );
    }

    const formData = webhookData.payload.data;
    const formName = webhookData.payload.name;
    
    // Extract form fields - adjust these field names to match your Webflow form
    const name = formData['Name'] || formData['First Name'] || formData['name'] || 'Unknown';
    const email = formData['Email'] || formData['email'] || 'No email provided';
    const comment = formData['Comment'] || formData['Message'] || formData['comment'] || formData['message'] || 'No message provided';

    // Log the received data for debugging
    console.log('Webflow webhook received:', {
      formName,
      submittedAt: webhookData.payload.submittedAt,
      fields: Object.keys(formData)
    });

    // Create ClickUp task
    const clickupResponse = await fetch(`https://api.clickup.com/api/v2/list/${CLICKUP_LIST_ID}/task`, {
      method: 'POST',
      headers: {
        Authorization: CLICKUP_API_TOKEN,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: `${formName} Submission: ${name}`,
        description: `**Form:** ${formName}\n**Submitted:** ${webhookData.payload.submittedAt}\n\n**Name:** ${name}\n**Email:** ${email}\n**Message:** ${comment}\n\n**All Form Data:**\n${JSON.stringify(formData, null, 2)}`,
        status: 'to do',
      }),
    });

    if (!clickupResponse.ok) {
      const errorBody = await clickupResponse.text();
      console.error('ClickUp API Error:', errorBody);
      return NextResponse.json(
        { message: 'Error creating task in ClickUp' },
        { status: 500 }
      );
    }

    return NextResponse.json({ 
      message: 'Webhook processed successfully',
      taskCreated: true 
    });
  } catch (error: any) {
    console.error('Unexpected error:', error.message);
    return NextResponse.json(
      { message: 'Server error' },
      { status: 500 }
    );
  }
}
